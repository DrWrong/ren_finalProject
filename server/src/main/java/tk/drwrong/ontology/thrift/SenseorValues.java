/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tk.drwrong.ontology.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SenseorValues implements org.apache.thrift.TBase<SenseorValues, SenseorValues._Fields>, java.io.Serializable, Cloneable, Comparable<SenseorValues> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SenseorValues");

  private static final org.apache.thrift.protocol.TField EX_H2S_FIELD_DESC = new org.apache.thrift.protocol.TField("exH2s", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField EX_OXY2_FIELD_DESC = new org.apache.thrift.protocol.TField("exOxy2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField EX_PH2_FIELD_DESC = new org.apache.thrift.protocol.TField("exPH2", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField EX_TEMPL_FIELD_DESC = new org.apache.thrift.protocol.TField("exTempl", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField EXAMPLE_CONDUCITIVITY2_FIELD_DESC = new org.apache.thrift.protocol.TField("exampleConducitivity2", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SenseorValuesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SenseorValuesTupleSchemeFactory());
  }

  public double exH2s; // required
  public double exOxy2; // required
  public double exPH2; // required
  public double exTempl; // required
  public double exampleConducitivity2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EX_H2S((short)1, "exH2s"),
    EX_OXY2((short)2, "exOxy2"),
    EX_PH2((short)3, "exPH2"),
    EX_TEMPL((short)4, "exTempl"),
    EXAMPLE_CONDUCITIVITY2((short)5, "exampleConducitivity2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX_H2S
          return EX_H2S;
        case 2: // EX_OXY2
          return EX_OXY2;
        case 3: // EX_PH2
          return EX_PH2;
        case 4: // EX_TEMPL
          return EX_TEMPL;
        case 5: // EXAMPLE_CONDUCITIVITY2
          return EXAMPLE_CONDUCITIVITY2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXH2S_ISSET_ID = 0;
  private static final int __EXOXY2_ISSET_ID = 1;
  private static final int __EXPH2_ISSET_ID = 2;
  private static final int __EXTEMPL_ISSET_ID = 3;
  private static final int __EXAMPLECONDUCITIVITY2_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EX_H2S, new org.apache.thrift.meta_data.FieldMetaData("exH2s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EX_OXY2, new org.apache.thrift.meta_data.FieldMetaData("exOxy2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EX_PH2, new org.apache.thrift.meta_data.FieldMetaData("exPH2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EX_TEMPL, new org.apache.thrift.meta_data.FieldMetaData("exTempl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXAMPLE_CONDUCITIVITY2, new org.apache.thrift.meta_data.FieldMetaData("exampleConducitivity2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SenseorValues.class, metaDataMap);
  }

  public SenseorValues() {
  }

  public SenseorValues(
    double exH2s,
    double exOxy2,
    double exPH2,
    double exTempl,
    double exampleConducitivity2)
  {
    this();
    this.exH2s = exH2s;
    setExH2sIsSet(true);
    this.exOxy2 = exOxy2;
    setExOxy2IsSet(true);
    this.exPH2 = exPH2;
    setExPH2IsSet(true);
    this.exTempl = exTempl;
    setExTemplIsSet(true);
    this.exampleConducitivity2 = exampleConducitivity2;
    setExampleConducitivity2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SenseorValues(SenseorValues other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exH2s = other.exH2s;
    this.exOxy2 = other.exOxy2;
    this.exPH2 = other.exPH2;
    this.exTempl = other.exTempl;
    this.exampleConducitivity2 = other.exampleConducitivity2;
  }

  public SenseorValues deepCopy() {
    return new SenseorValues(this);
  }

  @Override
  public void clear() {
    setExH2sIsSet(false);
    this.exH2s = 0.0;
    setExOxy2IsSet(false);
    this.exOxy2 = 0.0;
    setExPH2IsSet(false);
    this.exPH2 = 0.0;
    setExTemplIsSet(false);
    this.exTempl = 0.0;
    setExampleConducitivity2IsSet(false);
    this.exampleConducitivity2 = 0.0;
  }

  public double getExH2s() {
    return this.exH2s;
  }

  public SenseorValues setExH2s(double exH2s) {
    this.exH2s = exH2s;
    setExH2sIsSet(true);
    return this;
  }

  public void unsetExH2s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXH2S_ISSET_ID);
  }

  /** Returns true if field exH2s is set (has been assigned a value) and false otherwise */
  public boolean isSetExH2s() {
    return EncodingUtils.testBit(__isset_bitfield, __EXH2S_ISSET_ID);
  }

  public void setExH2sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXH2S_ISSET_ID, value);
  }

  public double getExOxy2() {
    return this.exOxy2;
  }

  public SenseorValues setExOxy2(double exOxy2) {
    this.exOxy2 = exOxy2;
    setExOxy2IsSet(true);
    return this;
  }

  public void unsetExOxy2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXOXY2_ISSET_ID);
  }

  /** Returns true if field exOxy2 is set (has been assigned a value) and false otherwise */
  public boolean isSetExOxy2() {
    return EncodingUtils.testBit(__isset_bitfield, __EXOXY2_ISSET_ID);
  }

  public void setExOxy2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXOXY2_ISSET_ID, value);
  }

  public double getExPH2() {
    return this.exPH2;
  }

  public SenseorValues setExPH2(double exPH2) {
    this.exPH2 = exPH2;
    setExPH2IsSet(true);
    return this;
  }

  public void unsetExPH2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPH2_ISSET_ID);
  }

  /** Returns true if field exPH2 is set (has been assigned a value) and false otherwise */
  public boolean isSetExPH2() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPH2_ISSET_ID);
  }

  public void setExPH2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPH2_ISSET_ID, value);
  }

  public double getExTempl() {
    return this.exTempl;
  }

  public SenseorValues setExTempl(double exTempl) {
    this.exTempl = exTempl;
    setExTemplIsSet(true);
    return this;
  }

  public void unsetExTempl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTEMPL_ISSET_ID);
  }

  /** Returns true if field exTempl is set (has been assigned a value) and false otherwise */
  public boolean isSetExTempl() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTEMPL_ISSET_ID);
  }

  public void setExTemplIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTEMPL_ISSET_ID, value);
  }

  public double getExampleConducitivity2() {
    return this.exampleConducitivity2;
  }

  public SenseorValues setExampleConducitivity2(double exampleConducitivity2) {
    this.exampleConducitivity2 = exampleConducitivity2;
    setExampleConducitivity2IsSet(true);
    return this;
  }

  public void unsetExampleConducitivity2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXAMPLECONDUCITIVITY2_ISSET_ID);
  }

  /** Returns true if field exampleConducitivity2 is set (has been assigned a value) and false otherwise */
  public boolean isSetExampleConducitivity2() {
    return EncodingUtils.testBit(__isset_bitfield, __EXAMPLECONDUCITIVITY2_ISSET_ID);
  }

  public void setExampleConducitivity2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXAMPLECONDUCITIVITY2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EX_H2S:
      if (value == null) {
        unsetExH2s();
      } else {
        setExH2s((Double)value);
      }
      break;

    case EX_OXY2:
      if (value == null) {
        unsetExOxy2();
      } else {
        setExOxy2((Double)value);
      }
      break;

    case EX_PH2:
      if (value == null) {
        unsetExPH2();
      } else {
        setExPH2((Double)value);
      }
      break;

    case EX_TEMPL:
      if (value == null) {
        unsetExTempl();
      } else {
        setExTempl((Double)value);
      }
      break;

    case EXAMPLE_CONDUCITIVITY2:
      if (value == null) {
        unsetExampleConducitivity2();
      } else {
        setExampleConducitivity2((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EX_H2S:
      return Double.valueOf(getExH2s());

    case EX_OXY2:
      return Double.valueOf(getExOxy2());

    case EX_PH2:
      return Double.valueOf(getExPH2());

    case EX_TEMPL:
      return Double.valueOf(getExTempl());

    case EXAMPLE_CONDUCITIVITY2:
      return Double.valueOf(getExampleConducitivity2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EX_H2S:
      return isSetExH2s();
    case EX_OXY2:
      return isSetExOxy2();
    case EX_PH2:
      return isSetExPH2();
    case EX_TEMPL:
      return isSetExTempl();
    case EXAMPLE_CONDUCITIVITY2:
      return isSetExampleConducitivity2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SenseorValues)
      return this.equals((SenseorValues)that);
    return false;
  }

  public boolean equals(SenseorValues that) {
    if (that == null)
      return false;

    boolean this_present_exH2s = true;
    boolean that_present_exH2s = true;
    if (this_present_exH2s || that_present_exH2s) {
      if (!(this_present_exH2s && that_present_exH2s))
        return false;
      if (this.exH2s != that.exH2s)
        return false;
    }

    boolean this_present_exOxy2 = true;
    boolean that_present_exOxy2 = true;
    if (this_present_exOxy2 || that_present_exOxy2) {
      if (!(this_present_exOxy2 && that_present_exOxy2))
        return false;
      if (this.exOxy2 != that.exOxy2)
        return false;
    }

    boolean this_present_exPH2 = true;
    boolean that_present_exPH2 = true;
    if (this_present_exPH2 || that_present_exPH2) {
      if (!(this_present_exPH2 && that_present_exPH2))
        return false;
      if (this.exPH2 != that.exPH2)
        return false;
    }

    boolean this_present_exTempl = true;
    boolean that_present_exTempl = true;
    if (this_present_exTempl || that_present_exTempl) {
      if (!(this_present_exTempl && that_present_exTempl))
        return false;
      if (this.exTempl != that.exTempl)
        return false;
    }

    boolean this_present_exampleConducitivity2 = true;
    boolean that_present_exampleConducitivity2 = true;
    if (this_present_exampleConducitivity2 || that_present_exampleConducitivity2) {
      if (!(this_present_exampleConducitivity2 && that_present_exampleConducitivity2))
        return false;
      if (this.exampleConducitivity2 != that.exampleConducitivity2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SenseorValues other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExH2s()).compareTo(other.isSetExH2s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExH2s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exH2s, other.exH2s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExOxy2()).compareTo(other.isSetExOxy2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExOxy2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exOxy2, other.exOxy2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExPH2()).compareTo(other.isSetExPH2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExPH2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exPH2, other.exPH2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExTempl()).compareTo(other.isSetExTempl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExTempl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exTempl, other.exTempl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExampleConducitivity2()).compareTo(other.isSetExampleConducitivity2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExampleConducitivity2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exampleConducitivity2, other.exampleConducitivity2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SenseorValues(");
    boolean first = true;

    sb.append("exH2s:");
    sb.append(this.exH2s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exOxy2:");
    sb.append(this.exOxy2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exPH2:");
    sb.append(this.exPH2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exTempl:");
    sb.append(this.exTempl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exampleConducitivity2:");
    sb.append(this.exampleConducitivity2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SenseorValuesStandardSchemeFactory implements SchemeFactory {
    public SenseorValuesStandardScheme getScheme() {
      return new SenseorValuesStandardScheme();
    }
  }

  private static class SenseorValuesStandardScheme extends StandardScheme<SenseorValues> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SenseorValues struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EX_H2S
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exH2s = iprot.readDouble();
              struct.setExH2sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_OXY2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exOxy2 = iprot.readDouble();
              struct.setExOxy2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EX_PH2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exPH2 = iprot.readDouble();
              struct.setExPH2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EX_TEMPL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exTempl = iprot.readDouble();
              struct.setExTemplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXAMPLE_CONDUCITIVITY2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exampleConducitivity2 = iprot.readDouble();
              struct.setExampleConducitivity2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SenseorValues struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EX_H2S_FIELD_DESC);
      oprot.writeDouble(struct.exH2s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EX_OXY2_FIELD_DESC);
      oprot.writeDouble(struct.exOxy2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EX_PH2_FIELD_DESC);
      oprot.writeDouble(struct.exPH2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EX_TEMPL_FIELD_DESC);
      oprot.writeDouble(struct.exTempl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXAMPLE_CONDUCITIVITY2_FIELD_DESC);
      oprot.writeDouble(struct.exampleConducitivity2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SenseorValuesTupleSchemeFactory implements SchemeFactory {
    public SenseorValuesTupleScheme getScheme() {
      return new SenseorValuesTupleScheme();
    }
  }

  private static class SenseorValuesTupleScheme extends TupleScheme<SenseorValues> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SenseorValues struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExH2s()) {
        optionals.set(0);
      }
      if (struct.isSetExOxy2()) {
        optionals.set(1);
      }
      if (struct.isSetExPH2()) {
        optionals.set(2);
      }
      if (struct.isSetExTempl()) {
        optionals.set(3);
      }
      if (struct.isSetExampleConducitivity2()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExH2s()) {
        oprot.writeDouble(struct.exH2s);
      }
      if (struct.isSetExOxy2()) {
        oprot.writeDouble(struct.exOxy2);
      }
      if (struct.isSetExPH2()) {
        oprot.writeDouble(struct.exPH2);
      }
      if (struct.isSetExTempl()) {
        oprot.writeDouble(struct.exTempl);
      }
      if (struct.isSetExampleConducitivity2()) {
        oprot.writeDouble(struct.exampleConducitivity2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SenseorValues struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.exH2s = iprot.readDouble();
        struct.setExH2sIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exOxy2 = iprot.readDouble();
        struct.setExOxy2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.exPH2 = iprot.readDouble();
        struct.setExPH2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.exTempl = iprot.readDouble();
        struct.setExTemplIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exampleConducitivity2 = iprot.readDouble();
        struct.setExampleConducitivity2IsSet(true);
      }
    }
  }

}

