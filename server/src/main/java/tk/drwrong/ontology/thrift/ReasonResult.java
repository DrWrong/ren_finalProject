/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tk.drwrong.ontology.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReasonResult implements org.apache.thrift.TBase<ReasonResult, ReasonResult._Fields>, java.io.Serializable, Cloneable, Comparable<ReasonResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReasonResult");

  private static final org.apache.thrift.protocol.TField REPORT_H2_S_FIELD_DESC = new org.apache.thrift.protocol.TField("reportH2S", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_GQOW_FIELD_DESC = new org.apache.thrift.protocol.TField("reportGQOW", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REPORT_OIL_FIELD_DESC = new org.apache.thrift.protocol.TField("reportOil", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField VERIFY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyData", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReasonResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReasonResultTupleSchemeFactory());
  }

  public boolean reportH2S; // required
  public boolean reportGQOW; // required
  public boolean reportOil; // required
  public boolean verifyData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPORT_H2_S((short)1, "reportH2S"),
    REPORT_GQOW((short)2, "reportGQOW"),
    REPORT_OIL((short)3, "reportOil"),
    VERIFY_DATA((short)4, "verifyData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPORT_H2_S
          return REPORT_H2_S;
        case 2: // REPORT_GQOW
          return REPORT_GQOW;
        case 3: // REPORT_OIL
          return REPORT_OIL;
        case 4: // VERIFY_DATA
          return VERIFY_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORTH2S_ISSET_ID = 0;
  private static final int __REPORTGQOW_ISSET_ID = 1;
  private static final int __REPORTOIL_ISSET_ID = 2;
  private static final int __VERIFYDATA_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPORT_H2_S, new org.apache.thrift.meta_data.FieldMetaData("reportH2S", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPORT_GQOW, new org.apache.thrift.meta_data.FieldMetaData("reportGQOW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPORT_OIL, new org.apache.thrift.meta_data.FieldMetaData("reportOil", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VERIFY_DATA, new org.apache.thrift.meta_data.FieldMetaData("verifyData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReasonResult.class, metaDataMap);
  }

  public ReasonResult() {
  }

  public ReasonResult(
    boolean reportH2S,
    boolean reportGQOW,
    boolean reportOil,
    boolean verifyData)
  {
    this();
    this.reportH2S = reportH2S;
    setReportH2SIsSet(true);
    this.reportGQOW = reportGQOW;
    setReportGQOWIsSet(true);
    this.reportOil = reportOil;
    setReportOilIsSet(true);
    this.verifyData = verifyData;
    setVerifyDataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReasonResult(ReasonResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.reportH2S = other.reportH2S;
    this.reportGQOW = other.reportGQOW;
    this.reportOil = other.reportOil;
    this.verifyData = other.verifyData;
  }

  public ReasonResult deepCopy() {
    return new ReasonResult(this);
  }

  @Override
  public void clear() {
    setReportH2SIsSet(false);
    this.reportH2S = false;
    setReportGQOWIsSet(false);
    this.reportGQOW = false;
    setReportOilIsSet(false);
    this.reportOil = false;
    setVerifyDataIsSet(false);
    this.verifyData = false;
  }

  public boolean isReportH2S() {
    return this.reportH2S;
  }

  public ReasonResult setReportH2S(boolean reportH2S) {
    this.reportH2S = reportH2S;
    setReportH2SIsSet(true);
    return this;
  }

  public void unsetReportH2S() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTH2S_ISSET_ID);
  }

  /** Returns true if field reportH2S is set (has been assigned a value) and false otherwise */
  public boolean isSetReportH2S() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTH2S_ISSET_ID);
  }

  public void setReportH2SIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTH2S_ISSET_ID, value);
  }

  public boolean isReportGQOW() {
    return this.reportGQOW;
  }

  public ReasonResult setReportGQOW(boolean reportGQOW) {
    this.reportGQOW = reportGQOW;
    setReportGQOWIsSet(true);
    return this;
  }

  public void unsetReportGQOW() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTGQOW_ISSET_ID);
  }

  /** Returns true if field reportGQOW is set (has been assigned a value) and false otherwise */
  public boolean isSetReportGQOW() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTGQOW_ISSET_ID);
  }

  public void setReportGQOWIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTGQOW_ISSET_ID, value);
  }

  public boolean isReportOil() {
    return this.reportOil;
  }

  public ReasonResult setReportOil(boolean reportOil) {
    this.reportOil = reportOil;
    setReportOilIsSet(true);
    return this;
  }

  public void unsetReportOil() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTOIL_ISSET_ID);
  }

  /** Returns true if field reportOil is set (has been assigned a value) and false otherwise */
  public boolean isSetReportOil() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTOIL_ISSET_ID);
  }

  public void setReportOilIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTOIL_ISSET_ID, value);
  }

  public boolean isVerifyData() {
    return this.verifyData;
  }

  public ReasonResult setVerifyData(boolean verifyData) {
    this.verifyData = verifyData;
    setVerifyDataIsSet(true);
    return this;
  }

  public void unsetVerifyData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFYDATA_ISSET_ID);
  }

  /** Returns true if field verifyData is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifyData() {
    return EncodingUtils.testBit(__isset_bitfield, __VERIFYDATA_ISSET_ID);
  }

  public void setVerifyDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFYDATA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPORT_H2_S:
      if (value == null) {
        unsetReportH2S();
      } else {
        setReportH2S((Boolean)value);
      }
      break;

    case REPORT_GQOW:
      if (value == null) {
        unsetReportGQOW();
      } else {
        setReportGQOW((Boolean)value);
      }
      break;

    case REPORT_OIL:
      if (value == null) {
        unsetReportOil();
      } else {
        setReportOil((Boolean)value);
      }
      break;

    case VERIFY_DATA:
      if (value == null) {
        unsetVerifyData();
      } else {
        setVerifyData((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPORT_H2_S:
      return Boolean.valueOf(isReportH2S());

    case REPORT_GQOW:
      return Boolean.valueOf(isReportGQOW());

    case REPORT_OIL:
      return Boolean.valueOf(isReportOil());

    case VERIFY_DATA:
      return Boolean.valueOf(isVerifyData());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPORT_H2_S:
      return isSetReportH2S();
    case REPORT_GQOW:
      return isSetReportGQOW();
    case REPORT_OIL:
      return isSetReportOil();
    case VERIFY_DATA:
      return isSetVerifyData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReasonResult)
      return this.equals((ReasonResult)that);
    return false;
  }

  public boolean equals(ReasonResult that) {
    if (that == null)
      return false;

    boolean this_present_reportH2S = true;
    boolean that_present_reportH2S = true;
    if (this_present_reportH2S || that_present_reportH2S) {
      if (!(this_present_reportH2S && that_present_reportH2S))
        return false;
      if (this.reportH2S != that.reportH2S)
        return false;
    }

    boolean this_present_reportGQOW = true;
    boolean that_present_reportGQOW = true;
    if (this_present_reportGQOW || that_present_reportGQOW) {
      if (!(this_present_reportGQOW && that_present_reportGQOW))
        return false;
      if (this.reportGQOW != that.reportGQOW)
        return false;
    }

    boolean this_present_reportOil = true;
    boolean that_present_reportOil = true;
    if (this_present_reportOil || that_present_reportOil) {
      if (!(this_present_reportOil && that_present_reportOil))
        return false;
      if (this.reportOil != that.reportOil)
        return false;
    }

    boolean this_present_verifyData = true;
    boolean that_present_verifyData = true;
    if (this_present_verifyData || that_present_verifyData) {
      if (!(this_present_verifyData && that_present_verifyData))
        return false;
      if (this.verifyData != that.verifyData)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReasonResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReportH2S()).compareTo(other.isSetReportH2S());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportH2S()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportH2S, other.reportH2S);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportGQOW()).compareTo(other.isSetReportGQOW());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportGQOW()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportGQOW, other.reportGQOW);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportOil()).compareTo(other.isSetReportOil());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportOil()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportOil, other.reportOil);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerifyData()).compareTo(other.isSetVerifyData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifyData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyData, other.verifyData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReasonResult(");
    boolean first = true;

    sb.append("reportH2S:");
    sb.append(this.reportH2S);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportGQOW:");
    sb.append(this.reportGQOW);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportOil:");
    sb.append(this.reportOil);
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifyData:");
    sb.append(this.verifyData);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReasonResultStandardSchemeFactory implements SchemeFactory {
    public ReasonResultStandardScheme getScheme() {
      return new ReasonResultStandardScheme();
    }
  }

  private static class ReasonResultStandardScheme extends StandardScheme<ReasonResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReasonResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPORT_H2_S
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reportH2S = iprot.readBool();
              struct.setReportH2SIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_GQOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reportGQOW = iprot.readBool();
              struct.setReportGQOWIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORT_OIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reportOil = iprot.readBool();
              struct.setReportOilIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERIFY_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.verifyData = iprot.readBool();
              struct.setVerifyDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReasonResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REPORT_H2_S_FIELD_DESC);
      oprot.writeBool(struct.reportH2S);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORT_GQOW_FIELD_DESC);
      oprot.writeBool(struct.reportGQOW);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORT_OIL_FIELD_DESC);
      oprot.writeBool(struct.reportOil);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERIFY_DATA_FIELD_DESC);
      oprot.writeBool(struct.verifyData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReasonResultTupleSchemeFactory implements SchemeFactory {
    public ReasonResultTupleScheme getScheme() {
      return new ReasonResultTupleScheme();
    }
  }

  private static class ReasonResultTupleScheme extends TupleScheme<ReasonResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReasonResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReportH2S()) {
        optionals.set(0);
      }
      if (struct.isSetReportGQOW()) {
        optionals.set(1);
      }
      if (struct.isSetReportOil()) {
        optionals.set(2);
      }
      if (struct.isSetVerifyData()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReportH2S()) {
        oprot.writeBool(struct.reportH2S);
      }
      if (struct.isSetReportGQOW()) {
        oprot.writeBool(struct.reportGQOW);
      }
      if (struct.isSetReportOil()) {
        oprot.writeBool(struct.reportOil);
      }
      if (struct.isSetVerifyData()) {
        oprot.writeBool(struct.verifyData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReasonResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.reportH2S = iprot.readBool();
        struct.setReportH2SIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reportGQOW = iprot.readBool();
        struct.setReportGQOWIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reportOil = iprot.readBool();
        struct.setReportOilIsSet(true);
      }
      if (incoming.get(3)) {
        struct.verifyData = iprot.readBool();
        struct.setVerifyDataIsSet(true);
      }
    }
  }

}

